# coding: utf-8

"""
    Taxi Aggregator DB Service

    обращения операторов Такси к БД водителей.  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class DriverFatigue(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'hash_id': 'DriverHash',
        'online': 'SingleData',
        'on_order': 'SingleData'
    }

    attribute_map = {
        'hash_id': 'hash_id',
        'online': 'online',
        'on_order': 'on_order'
    }

    def __init__(self, hash_id=None, online=None, on_order=None):  # noqa: E501
        """DriverFatigue - a model defined in Swagger"""  # noqa: E501
        self._hash_id = None
        self._online = None
        self._on_order = None
        self.discriminator = None
        if hash_id is not None:
            self.hash_id = hash_id
        if online is not None:
            self.online = online
        if on_order is not None:
            self.on_order = on_order

    @property
    def hash_id(self):
        """Gets the hash_id of this DriverFatigue.  # noqa: E501


        :return: The hash_id of this DriverFatigue.  # noqa: E501
        :rtype: DriverHash
        """
        return self._hash_id

    @hash_id.setter
    def hash_id(self, hash_id):
        """Sets the hash_id of this DriverFatigue.


        :param hash_id: The hash_id of this DriverFatigue.  # noqa: E501
        :type: DriverHash
        """

        self._hash_id = hash_id

    @property
    def online(self):
        """Gets the online of this DriverFatigue.  # noqa: E501


        :return: The online of this DriverFatigue.  # noqa: E501
        :rtype: SingleData
        """
        return self._online

    @online.setter
    def online(self, online):
        """Sets the online of this DriverFatigue.


        :param online: The online of this DriverFatigue.  # noqa: E501
        :type: SingleData
        """

        self._online = online

    @property
    def on_order(self):
        """Gets the on_order of this DriverFatigue.  # noqa: E501


        :return: The on_order of this DriverFatigue.  # noqa: E501
        :rtype: SingleData
        """
        return self._on_order

    @on_order.setter
    def on_order(self, on_order):
        """Sets the on_order of this DriverFatigue.


        :param on_order: The on_order of this DriverFatigue.  # noqa: E501
        :type: SingleData
        """

        self._on_order = on_order

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DriverFatigue, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DriverFatigue):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
