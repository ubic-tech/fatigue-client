# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.driver_hash import DriverHash  # noqa: F401,E501
from swagger_server.models.single_data import SingleData  # noqa: F401,E501
from swagger_server import util


class DriverSingleData(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, hash_id: DriverHash=None, online: SingleData=None):  # noqa: E501
        """DriverSingleData - a model defined in Swagger

        :param hash_id: The hash_id of this DriverSingleData.  # noqa: E501
        :type hash_id: DriverHash
        :param online: The online of this DriverSingleData.  # noqa: E501
        :type online: SingleData
        """
        self.swagger_types = {
            'hash_id': DriverHash,
            'online': SingleData
        }

        self.attribute_map = {
            'hash_id': 'hash_id',
            'online': 'online'
        }
        self._hash_id = hash_id
        self._online = online

    @classmethod
    def from_dict(cls, dikt) -> 'DriverSingleData':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The DriverSingleData of this DriverSingleData.  # noqa: E501
        :rtype: DriverSingleData
        """
        return util.deserialize_model(dikt, cls)

    @property
    def hash_id(self) -> DriverHash:
        """Gets the hash_id of this DriverSingleData.


        :return: The hash_id of this DriverSingleData.
        :rtype: DriverHash
        """
        return self._hash_id

    @hash_id.setter
    def hash_id(self, hash_id: DriverHash):
        """Sets the hash_id of this DriverSingleData.


        :param hash_id: The hash_id of this DriverSingleData.
        :type hash_id: DriverHash
        """
        if hash_id is None:
            raise ValueError("Invalid value for `hash_id`, must not be `None`")  # noqa: E501

        self._hash_id = hash_id

    @property
    def online(self) -> SingleData:
        """Gets the online of this DriverSingleData.


        :return: The online of this DriverSingleData.
        :rtype: SingleData
        """
        return self._online

    @online.setter
    def online(self, online: SingleData):
        """Sets the online of this DriverSingleData.


        :param online: The online of this DriverSingleData.
        :type online: SingleData
        """
        if online is None:
            raise ValueError("Invalid value for `online`, must not be `None`")  # noqa: E501

        self._online = online
